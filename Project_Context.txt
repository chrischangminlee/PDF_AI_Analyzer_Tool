# Project_Context.txt

## 📋 파일 목적
이 파일은 PDF AI 분석 도구 프로젝트의 전체 구조와 각 파일의 함수/기능을 요약한 문서입니다.
LLM이 요청을 수행하는데 필요한 특정 코드 위치를 정확히 식별하고 수정할 수 있도록 라인 번호와 함께 정리되어 있습니다.
**⚠️ 중요: 코드 변경 시 이 파일도 반드시 업데이트해야 합니다.**

---

## 🏗️ 프로젝트 구조
```
PDF_Analysis_UX_Enhanced_PJT/
├── app.py                    # 메인 애플리케이션 진입점
├── config.py                 # 환경 설정 및 API 키 관리
├── requirements.txt          # Python 패키지 의존성
├── packages.txt             # 시스템 패키지 (poppler 등)
├── components/              # UI 컴포넌트 모듈
│   ├── __init__.py         # 컴포넌트 모듈 초기화
│   ├── sidebar.py          # 사이드바 UI
│   └── upload_step.py      # PDF 업로드 및 분석 결과 표시
├── services/               # 비즈니스 로직 서비스
│   ├── pdf_service.py      # PDF 처리 관련 기능
│   └── gemini_service.py   # Google Gemini API 연동
├── utils/                  # 유틸리티 함수
│   └── session_state.py    # Streamlit 세션 상태 관리
├── Filereference/          # 예시 PDF 파일
│   ├── changminlee_intro.pdf
│   └── K-ICS 해설서.pdf
├── Project_Context.txt     # 이 문서
├── README.md              # 프로젝트 소개
└── CLAUDE.md              # Claude Code 가이드
```

---

## 📁 /app.py
- Line 1-7: Import 문
  - streamlit, components, utils 모듈 import
- Line 9-10: 페이지 설정 및 세션 초기화
  - init_session_state() 호출
- Line 12-13: 사이드바 렌더링
  - render_sidebar() 호출
- Line 15-20: 메인 UI
  - 앱 타이틀 및 설명 표시
- Line 22: PDF 업로드 및 분석 실행
  - run_upload_step() 호출

---

## 📁 /config.py
- Line 1-6: Import 및 페이지 설정
  - Streamlit 페이지 config 설정
- Line 8-11: get_api_key()
  - Streamlit secrets 또는 .env에서 API 키 가져오기
- Line 13-21: API 키 검증 및 Gemini 설정
  - API 키 존재 확인 및 genai.configure() 호출

---

## 📁 /components/__init__.py
- Line 1-8: 모듈 docstring
  - UI 컴포넌트, 서비스, 유틸리티 모듈 설명

---

## 📁 /components/sidebar.py
- Line 1: Import 문
- Line 3-24: render_sidebar()
  - 앱 소개 표시 (Gemini 2.5 flash 사용)
  - 사용 방법 4단계 설명
  - 보안 주의사항 표시 (빨간색 텍스트)
  - 외부 링크 제공:
    - 개발자 링크드인
    - K-계리 AI 플랫폼
    - 구 버전 PDF 분석기

---

## 📁 /components/upload_step.py
- Line 1-5: Import 문
  - streamlit, pandas, io, PDF/Gemini 서비스 import
- Line 7-146: run_upload_step()
  - 예시 PDF 로드/제거 버튼 (changminlee_intro.pdf)
  - PDF 업로드 폼 구성
  - 3단계 분석 프로세스:
    1. PDF 페이지 번호 삽입
    2. PDF를 이미지로 변환
    3. AI 관련 페이지 분석
  - 에러 처리 및 디버깅 정보 표시
- Line 11-19: load_example_pdf() (내부 함수)
  - 예시 PDF 파일 로드
- Line 148-307: display_analysis_results()
  - 원본 질문 및 개선된 프롬프트 표시
  - 최종 답변 섹션 (검증된 답변들의 요약)
  - 분석 결과 테이블:
    - 3컬럼 구성: 페이지, 답변, 상세보기
    - 관련도 표시 (🔴 상, 🟡 중)
  - 페이지 미리보기 기능:
    - 하단에 이미지 표시
    - 닫기 버튼으로 미리보기 종료
  - CSV 다운로드 (UTF-8 BOM 인코딩)
  - 새로운 분석 시작 버튼

---

## 📁 /services/pdf_service.py
- Line 1-7: Import 문
- Line 9-15: convert_pdf_to_images(pdf_bytes)
  - PDF를 JPEG 이미지로 변환 (dpi=100)
  - pdf2image 라이브러리 사용
- Line 17-37: annotate_pdf_with_page_numbers(pdf_bytes)
  - PDF 각 페이지 좌측 상단에 페이지 번호 오버레이
  - ReportLab으로 번호 생성, PyPDF2로 병합
- Line 39-55: extract_single_page_pdf(pdf_bytes, page_num)
  - 특정 페이지만 추출하여 별도 PDF 생성
  - 페이지 상세 보기 기능에 사용

---

## 📁 /services/gemini_service.py
- Line 1-11: Import 문 및 모델 설정
  - GEMINI_MODEL = "gemini-2.0-flash-latest"
- Line 13-51: call_gemini_with_retry(model, content, max_retries, base_delay, status_placeholder)
  - Gemini API 호출 with 재시도 로직
  - 429 에러(할당량 초과) 시 지수 백오프
  - status_placeholder로 상태 메시지 단일화
- Line 53-104: parse_page_info(gemini_response)
  - JSON 형식 응답 파싱
  - 페이지 번호, 답변, 관련도 추출
  - 빈 응답이나 파싱 오류 시 상세 로그
- Line 106-117: parse_page_info_legacy(gemini_response)
  - 파이프(|) 구분 형식 파싱 (폴백용)
- Line 119-146: split_pdf_for_batch_analysis(pdf_bytes, batch_size=10)
  - PDF를 10페이지씩 배치로 분할
  - 임시 파일로 각 배치 저장
- Line 148-208: analyze_pdf_batch(batch_path, user_prompt, batch_info, status_placeholder)
  - 단일 배치 PDF를 Gemini로 분석
  - 관련도 '상': 직접적인 답변 (30자 이내 요약)
  - 관련도 '중': 간접 관련 정보 (답변 필드 빈 문자열)
  - JSON 형식으로 응답 요청
- Line 210-241: enhance_user_prompt(user_prompt, pdf_bytes, status_placeholder)
  - 사용자 프롬프트를 AI로 개선
  - 더 구체적이고 검색 친화적인 프롬프트 생성
- Line 243-323: find_relevant_pages_with_gemini(user_prompt, pdf_bytes, status_placeholder)
  - 전체 PDF를 배치 단위로 순차 분석
  - 프롬프트 개선 → 배치 분석 → 답변 검증 → 최종 요약
  - 진행률 표시 및 상태 업데이트
  - 결과 병합 및 중복 제거
- Line 325-374: validate_answers_with_prompt(refined_prompt, validated_results, pdf_bytes, status_placeholder)
  - 찾은 답변들이 실제로 개선된 프롬프트에 답하는지 검증
  - 관련 없는 답변 필터링
- Line 376-434: generate_final_summary(refined_prompt, validated_answers, pdf_bytes, status_placeholder)
  - 검증된 답변들을 바탕으로 종합적인 최종 요약 생성
  - 구조화된 답변 제공

---

## 📁 /utils/session_state.py
- Line 1: Import 문
- Line 3-14: init_session_state()
  - Streamlit 세션 상태 변수 초기화
  - relevant_pages, page_info, user_prompt, refined_prompt, final_summary 등 관리

---

## 🔄 주요 처리 흐름
1. **사용자 입력** (upload_step.py)
   - PDF 업로드 → user_prompt 입력 → 분석 시작

2. **프롬프트 개선** (gemini_service.py)
   - enhance_user_prompt() → AI가 더 나은 검색 프롬프트 생성

3. **PDF 전처리** (pdf_service.py)
   - annotate_pdf_with_page_numbers() → 페이지 번호 추가
   - convert_pdf_to_images() → 이미지 변환

4. **AI 분석** (gemini_service.py)
   - split_pdf_for_batch_analysis() → 10페이지 배치 분할
   - analyze_pdf_batch() → 각 배치 Gemini 분석
   - parse_page_info() → 응답 파싱

5. **답변 검증** (gemini_service.py)
   - validate_answers_with_prompt() → 개선된 프롬프트와 답변 관련성 검증

6. **최종 요약** (gemini_service.py)
   - generate_final_summary() → 검증된 답변들로 종합 요약 생성

7. **결과 표시** (upload_step.py)
   - display_analysis_results() → 개선된 프롬프트, 최종 요약, 상세 테이블 표시
   - 페이지 미리보기 (하단 표시)
   - CSV 다운로드 (UTF-8 BOM 인코딩)

---

## 💡 핵심 기능 위치
- **PDF 업로드 UI**: components/upload_step.py:7-146
- **프롬프트 개선**: services/gemini_service.py:210-241
- **Gemini API 호출**: services/gemini_service.py:148-208
- **답변 검증**: services/gemini_service.py:325-374
- **최종 요약 생성**: services/gemini_service.py:376-434
- **엑셀 스타일 테이블**: components/upload_step.py:148-307
- **페이지 미리보기**: components/upload_step.py:261-291
- **CSV 다운로드**: components/upload_step.py:244-256
- **페이지 번호 오버레이**: services/pdf_service.py:17-37
- **배치 분석 로직**: services/gemini_service.py:243-323
- **상태 메시지 관리**: services/gemini_service.py:13-51
- **사이드바 UI**: components/sidebar.py:3-24
- **세션 상태 초기화**: utils/session_state.py:3-14